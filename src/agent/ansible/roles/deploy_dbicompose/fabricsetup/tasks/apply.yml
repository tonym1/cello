---
- name: Setup and initialize variables
  set_fact:
    current_host: "{{ hostvars[inventory_hostname].inter_name }}"
    dbipath: "/home/{{ fabric.ssh_user }}/dbi"
    fabricworkdir: "/home/{{ fabric.ssh_user }}/dbi/test/fixtures-V1"
    peers: "{{ [] }}"
    orderers: "{{ [] }}"
    cas: "{{ [] }}"
    cakeys: "{{ {} }}"
    kafkas: "{{ [] }}"
    kafkanodes: ""
    zookeepers: "{{ [] }}"
    znodes: ""
    zkparam: ""
    index: 1
    zoo_ids: "{{ {} }}"
    kafka_ids: "{{ {} }}"
    zookeeperls: "{{ [] }}"
    kafkals: "{{ [] }}"
    peerls: "{{ [] }}"
    ordererls: "{{ [] }}"
    cals: "{{ [] }}"
    allpeers: "{{ [] }}"
    clihost: ""
    filterstr: ""

- name: Make sure that working directory is clean
  become: true
  become_user: root
  file:
    path: "{{ fabricworkdir }}/run"
    state: "absent"

- name: Make sure that working directory is clean
  file:
    path: "{{ fabricworkdir }}/run"
    state: "directory"

- name: Create component list
  set_fact:
    cals: "{{ cals | default([]) + item.value.cas | default([]) }}"
    ordererls: "{{ ordererls | default([]) + item.value.orderers | default([]) }}"
    peerls: "{{ peerls | default([]) + item.value.peers | default([]) }}"
    zookeeperls: "{{ zookeeperls | default([]) + item.value.zookeepers | default([]) }}"
    kafkals: "{{ kafkals | default([]) + item.value.kafkas | default([]) }}"
  with_dict: "{{ fabric.network }}"

- name: Sort component list
  set_fact:
    zookeeperls: "{{ zookeeperls | sort }}"
    kafkals: "{{ kafkals | sort }}"

- name: Generate zookeeper node list
  set_fact:
    znodes: "{{ znodes }} server.{{ index }}={{ item }}:2888:3888"
    zkparam: "{{ zkparam + item }}:2181 "
    zoo_ids: "{{ zoo_ids | combine({item: index}) }}"
    index: "{{ index | int + 1 }}"
  with_items: "{{ zookeeperls | default([]) }}"

- name: Reset the index
  set_fact:
    index: 1

- name: Generate kafka broker ids
  set_fact:
    kafka_ids: "{{ kafka_ids | combine({item: index}) }}"
    index: "{{ index | int + 1 }}"
  with_items: "{{ kafkals | default([]) }}"

- name: Get all peer object list
  set_fact:
    allpeers: |
      {{ allpeers | default([]) + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1] | replace('.', '-'),
        'role':item.split('@')[0]}] }}
  with_items: "{{ peerls }}"

- name: Get all ca object list
  set_fact:
    allcas: |
      {{ allcas | default([]) + [{ 'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ cals }}"

- name: Get all orderer object list
  set_fact:
    allorderers: |
      {{ allorderers | default([]) + [{ 'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ ordererls }}"

- name: Get peer container list
  set_fact:
    peers: |
      {{ peers + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1] | replace('.', '-'),
        'role':item.split('@')[0]}] }}
  with_items: "{{ fabric.network[current_host].peers | default([]) }}"

- name: Get ca container list
  set_fact:
    cas: |
      {{ cas + [{'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ fabric.network[current_host].cas | default([]) }}"

- name: Get orderer container list
  set_fact:
    orderers: |
      {{ orderers + [{'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ fabric.network[current_host].orderers | default([]) }}"

- name: Set zookeeper and kafka container list
  set_fact:
    zookeepers: "{{ fabric.network[current_host].zookeepers | default([]) }}"
    kafkas: "{{ fabric.network[current_host].kafkas | default([]) }}"

# Changing private_ip to public_ip on scp commands...

- name: Pull certificates from the builder machine
  command: >-
    scp -i "/opt/gopath/id_rsa" -r -o "StrictHostKeyChecking no" "{{ fabric.
    ssh_user }}@{{ hostvars[groups['builders'][0]].public_ip }}:{{ fabricworkdir }}/certs.tgz"
    "{{ fabricworkdir }}/allcerts.tgz"

- name: Pull container images from the builder machine
  command: >-
    scp -i "/opt/gopath/id_rsa" -r -o "StrictHostKeyChecking no" "{{ fabric.
    ssh_user }}@{{ hostvars[groups['builders'][0]].public_ip }}:{{ fabricworkdir }}/images/fabricimages.tar"
    "{{ fabricworkdir }}/fabricimages.tar"
  when: fabric.baseimage_tag == '' and inventory_hostname not in groups['builders']

- name: Pull container version file from the build machine
  command: >-
    scp -i "/opt/gopath/id_rsa" -r -o "StrictHostKeyChecking no" "{{ fabric.
    ssh_user }}@{{ hostvars[groups['builders'][0]].public_ip }}:{{ fabricworkdir }}/images/VERSION"
    "{{ fabricworkdir }}/VERSION"

- name: Find out the image tags
  slurp:
    src: "{{ fabricworkdir }}/VERSION"
  register: imagetag

- name: Set the container tag
  set_fact:
    thetag: "{{ imagetag['content'] | b64decode }}"
    helpertag: "{{ fabric.helper_tag }}"

- stat:
    path: "{{ fabricworkdir }}/fabricimages.tar"
  register: imagepack

- name: Load all the docker images created by build machine
  shell: >-
    docker load -i {{ fabricworkdir }}/fabricimages.tar
  when: imagepack.stat.exists == true and inventory_hostname not in groups['builders']

- name: Unpack the certificates
  unarchive:
    src: "{{ fabricworkdir }}/allcerts.tgz"
    dest: "{{ fabricworkdir }}/run"
    remote_src: true

- name: Process private key files
  find:
    paths: "{{ fabricworkdir }}/run/keyfiles/{{ item[0].org }}/{{ item[1] }}"
    patterns: "*_sk"
    recurse: yes
  with_nested:
    - "{{ cas }}"
    - ["ca", "tlsca"]
  when: cas | length > 0
  register: privatekeys

- name: Process private key files
  template:
    src: "{{ playbook_dir }}/../deploy_dbicompose/fabricsetup/templates/fabric-ca-server-config.j2"
    dest: "{{ fabricworkdir }}/run/keyfiles/{{ item.org }}/ca/fabric-ca-server-config.yaml"
  with_items: "{{ cas }}"

- name: Setup ca private key values
  set_fact:
    cakeys: |
      {{ cakeys | combine( {item.item[0].org+'_'+item.item[1]: item.files[0].path.split('/')[-1] } ) }}
  with_items: "{{ privatekeys.results }}"
  no_log: True

- name: Get the peer org list
  set_fact:
    peerorgs: "{{ peers | map(attribute='org') | list  | unique | sort }}"

- name: Get all peer orgs
  set_fact:
    orgmembers: "{{ peers | map(attribute='org') | list  | unique | sort | join(\".member' '\") | trim | replace(' ', ',') }}"

- name: Pull necessary container images from the docker hub
  command: "docker pull {{ fabric.repo.url }}{{ item.name }}"
  when: item.flag | length > 0 and fabric.baseimage_tag | length > 0
  with_items:
    - { name: "fabric-ca:{{ fabric.ca.image_tag }}", flag: "{{ cas }}" }
    - { name: "fabric-zookeeper:{{ helpertag }}", flag: "{{ zookeepers }}" }
    - { name: "fabric-kafka:{{ helpertag }}", flag: "{{ kafkas }}" }
    - { name: "fabric-couchdb:{{ helpertag }}", flag: "{{ peers }}" }
    - { name: "fabric-orderer:{{ thetag }}", flag: "{{ orderers }}" }
    - { name: "fabric-peer:{{ thetag }}", flag: "{{ peers }}" }
    - { name: "fabric-ccenv:{{ thetag }}", flag: "{{ peers }}" }
    - { name: "fabric-tools:{{ thetag }}", flag: "tools" }
  tags: "pullimages"

- name: Create docker compose files
  template:
    src: "{{ playbook_dir }}/fabricsetup/templates/{{ item.name }}.j2"
    dest: "{{ fabricworkdir }}/run/{{ item.name }}.yml"
  when: item.flag | length > 0
  with_items:
    - { name: "ca-compose", flag: "{{ cas }}" }
    - { name: "zookeeper-compose", flag: "{{ zookeepers }}" }
    - { name: "kafka-compose", flag: "{{ kafkas }}" }
    - { name: "orderer-compose", flag: "{{ orderers }}" }
    - { name: "peer-compose", flag: "{{ peers }}" }

- name: Start fabric components
  command: "docker-compose -p {{ env }}.{{ item.name }} -f {{ fabricworkdir }}/run/{{ item.name }}.yml up -d"
  when: item.flag | length > 0
  with_items:
    - { name: "ca-compose", flag: "{{ cas }}" }
    - { name: "zookeeper-compose", flag: "{{ zookeepers }}" }
    - { name: "kafka-compose", flag: "{{ kafkas }}" }
    - { name: "orderer-compose", flag: "{{ orderers }}" }
    - { name: "peer-compose", flag: "{{ peers }}" }
  tags: "fabricup"

- name: Locate a host to run peer channel create command
  set_fact:
    clihost: "{{ item }}"
    clipeer: "{{ allpeers | random }}"
    cliorderer: "{{ allorderers | random }}"
  when: peers | length > 0 and clihost == ""
  with_items: "{{ groups['allnodes'] }}"

- name: Create a zip file of DBI chaincode
  archive:
    path: "{{ dbipath }}/chaincode/src/github.com/chaincode"
    dest: "{{ fabricworkdir }}/run/keyfiles/cc.tgz"

- name: Unarchive chaincode
  unarchive:
    src: "{{ fabricworkdir }}/run/keyfiles/cc.tgz"
    dest: "{{ fabricworkdir }}/run/keyfiles"
    remote_src: yes

- name: Move chaincode to the server
  copy:
    src: "{{ dbipath }}/chaincode/src/github.com/chaincode/poe/poe_chaincode.go"
    dest: "{{ fabricworkdir }}/run/keyfiles/chaincode/poe_chaincode.go"
    remote_src: yes
    mode: "u=rw,g=rw"
  when: clihost == inventory_hostname

- name: Create peer channel command script
  template:
    src: "{{ playbook_dir }}/fabricsetup/templates/dochannel.j2"
    dest: "{{ fabricworkdir }}/run/keyfiles/dochannel.sh"
    mode: "u=rx,g=rx"
  when: clihost == inventory_hostname

- name: Create peer channel command docker compose file
  template:
    src: "{{ playbook_dir }}/fabricsetup/templates/cli-compose.j2"
    dest: "{{ fabricworkdir }}/run/cli-compose.yml"
  when: clihost == inventory_hostname

- name: Create dbi ansible directory with network tools
  unarchive:
    src: "{{ playbook_dir }}/fabricsetup/templates//dbi_ansible.tgz"
    dest: "{{ dbipath }}"

- name: Create shell to rename sk keyfile
  template:
    src: "{{ playbook_dir }}/fabricsetup/templates/keyfile.j2"
    dest: "{{ dbipath }}/ansible/keyfile.sh"
    mode: "u=rwx,g=rwx"
  when: clihost == inventory_hostname

- name: Rename the sk keyfile
  shell: "{{ dbipath }}/ansible/keyfile.sh"
  when: clihost == inventory_hostname

- name: Create dbi network yaml
  template:
    src: "{{ playbook_dir }}/fabricsetup/templates/network.j2"
    dest: "{{ dbipath }}/ansible/network.yaml"
    mode: "u=rw,g=rw"
  when: clihost == inventory_hostname

- name: Create dbi org yamls
  template:
    src: "{{ playbook_dir }}/fabricsetup/templates/org.j2"
    dest: "{{ dbipath }}/{{ item.org }}.yaml"
    mode: "u=rw,g=rw"
  with_items: "{{ allcas }}"
  when: clihost == inventory_hostname

- name: Create dbi credentials 
  template:
    src: "{{ playbook_dir }}/fabricsetup/templates/credentials.j2"
    dest: "{{ dbipath }}/credentials.js"
    mode: "u=rw,g=rw"
  when: clihost == inventory_hostname

- name: Gather docker network data
  shell: |
    docker network inspect bridge > /tmp/docker_ip/{{ hostvars[inventory_hostname].inter_name }}
  register: dockercontainers

- name: fetch the network data to ansible controller
  fetch: 
    src: /tmp/docker_ip/{{ hostvars[inventory_hostname].inter_name }}
    dest: /tmp/docker_ip/
    flat: yes

- name: copy network data from all VMs to the builder VM
  copy:
    src: /tmp/docker_ip/
    dest: /home/ubuntu/dbi/ansible/docker_ip/
    owner: ubuntu
    mode: u=rw,g=r,o=r
  when: clihost == inventory_hostname

- name: Create network.yaml for "node api"
  shell: >-
    sh sednet.sh
  args:
    chdir: /home/ubuntu/dbi/ansible/docker_ip
  when: clihost == inventory_hostname


- name: Wait for containers to be ready
  pause:
    seconds: 60

- name: Start fabriccli components
  command: "docker-compose -p {{ env }}.cli -f {{ fabricworkdir }}/run/cli-compose.yml up -d"
  when: clihost == inventory_hostname
  register: clicontainers

- name: Run the Blocledger app
  command: pm2 start api.js
  args:
    chdir: "{{ dbipath }}"
  when: clihost == inventory_hostname

- name: Display api.js status
  command: pm2 list
  register: apistatus
  when: inventory_hostname in groups['builders']

- debug:
    var: apistatus.stdout_lines
  when: inventory_hostname in groups['builders']

